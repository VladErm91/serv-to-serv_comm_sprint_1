services:
# ---- сервис базы данных ----
  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME:-movies_database}
      - POSTGRES_USER=${DB_USER:-app}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-123qwe}
      - POSTGRES_HOST=${DB_HOST:-db}
      - POSTGRES_PORT=${DB_PORT:-5432}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema_design/dump_db.sql:/docker-entrypoint-initdb.d/dump_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d movies_database"]
      interval: 10s
      timeout: 5s
      retries: 5

# ---- сервис кэширования ----
  redis:
    image: redis:5.0.4
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    expose:
      - "6379"
    depends_on:
      db:
        condition: service_healthy

# ---- сервис авторизации ----
  auth:
    build: ./auth
    command: uvicorn --app-dir ./auth main:app --host 0.0.0.0 --port 8080
    expose:
      - "8080"
    # ports:
    #   - "8080:8080"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - ${JAEGER_UDP}:6831/udp
      - ${JAEGER_PORT}:16686
    command: [ "--log-level=debug" ]
    depends_on:
      - app
      - auth

# ---- сервис админки django ----
  django_admin:
    build: ./django_admin/app
    env_file:
      - .env
    expose:
      - "8081"
    # ports:
    #   - "8000:8000"
    volumes:
      - static:/opt/app/static
    restart: always
    depends_on:
      db:
        condition: service_healthy

# ---- сервис fastapi ----
  app:
    build: ./movie_api/app
    command: uvicorn --app-dir ./src main:app --host 0.0.0.0 --port 8000
    env_file:
      - .env
    expose:
      - "8000"
    # ports:
    #   - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy

  elastic:
    image: elasticsearch:8.6.2
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    expose:
      - "9200"
    volumes:
      - elasticsearch_data:/opt/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://elastic:9200/_cluster/health | grep -q '\\(green\\|yellow\\)'" ]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      db:
        condition: service_healthy

  # etl_service:
  #   build: ./movie_api/etl/postgres_to_es
  #   restart: always
  #   env_file:
  #     - ./movie_api//etl/postgres_to_es/.env
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     elastic:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy

# ---- сервис file_api ----
  file_api:
    container_name: file_api
    build: ./movie_api/file_api
    command: uvicorn --app-dir ./file_api main:app --host 0.0.0.0 --port 8001
    env_file:
      - .env
    volumes:
      - .:/file_api
    # ports:
    #   - "8001:8001"
    expose:
      - "8001"
    depends_on:
        db:
          condition: service_healthy
        minio:
          condition: service_started

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-practicum}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-StrongPass}
    volumes:
      - minio_storage:/data
    command: server --console-address ":9001" /data
    depends_on:
        db:
          condition: service_healthy
        django_admin:
          condition: service_started

volumes:
  postgres_data:
  elasticsearch_data:
  minio_storage:
  static:

include:
  - './rating_review_service/docker-compose.yml'
  - './ugc_service/docker-compose.yml'
  - './infra/nginx.yml'