"""initital

Revision ID: 3df29a4d10a6
Revises: 
Create Date: 2024-10-26 17:47:19.769905

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "3df29a4d10a6"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def create_partition(target, connection, **kw) -> None:
    """creating partition by user_sign_in"""
    connection.execute(
        """CREATE TABLE IF NOT EXISTS "users_auth_in_smart" PARTITION OF "history_auth" FOR VALUES IN ('smart')"""
    )
    connection.execute(
        """CREATE TABLE IF NOT EXISTS "users_auth_in_mobile" PARTITION OF "history_auth" FOR VALUES IN ('mobile')"""
    )
    connection.execute(
        """CREATE TABLE IF NOT EXISTS "users_auth_in_web" PARTITION OF "history_auth" FOR VALUES IN ('web')"""
    )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users_auth_in_mobile")
    op.drop_table("users_auth_in_web")
    op.drop_table("history_auth")
    op.drop_table("user_roles")
    op.drop_table("user_action_history")
    op.drop_table("auth_group")
    op.drop_table("roles")
    op.drop_table("users_auth_in_smart")
    op.drop_index("ix_users_email", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("login", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "password", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("vk_user_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "first_name", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "last_name", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("login", name="users_login_key"),
        sa.UniqueConstraint("vk_user_id", name="users_vk_user_id_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_users_email", "users", ["email"], unique=True)
    op.create_table(
        "auth_user",
        sa.Column(
            "id",
            sa.INTEGER(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=2147483647,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "password", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            "last_login",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("is_superuser", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "username", sa.VARCHAR(length=150), autoincrement=False, nullable=False
        ),
        sa.Column(
            "first_name", sa.VARCHAR(length=150), autoincrement=False, nullable=False
        ),
        sa.Column(
            "last_name", sa.VARCHAR(length=150), autoincrement=False, nullable=False
        ),
        sa.Column("email", sa.VARCHAR(length=254), autoincrement=False, nullable=False),
        sa.Column("is_staff", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "date_joined",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_table(
        "users_auth_in_smart",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("success", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("user_device_type", sa.TEXT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="history_auth_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", "user_device_type", name="users_auth_in_smart_pkey"
        ),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="roles_pkey"),
        sa.UniqueConstraint("name", name="roles_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "user_action_history",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "action", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "timestamp", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="user_action_history_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="user_action_history_pkey"),
    )
    op.create_table(
        "user_roles",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("role_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name="user_roles_role_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="user_roles_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="user_roles_pkey"),
    )
    op.create_table(
        "history_auth",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "success",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="Идентификатор, был ли вход успешным",
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
            comment="Дата создания записи",
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="Дата обновления записи",
        ),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "user_device_type",
            sa.TEXT(),
            autoincrement=False,
            nullable=False,
            comment="Тип устройства",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="history_auth_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", "user_device_type", name="history_auth_pkey"),
    )
    op.create_table(
        "users_auth_in_web",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("success", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("user_device_type", sa.TEXT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="history_auth_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", "user_device_type", name="users_auth_in_web_pkey"
        ),
    )
    op.create_table(
        "users_auth_in_mobile",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("success", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("user_device_type", sa.TEXT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="history_auth_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", "user_device_type", name="users_auth_in_mobile_pkey"
        ),
    )
    # ### end Alembic commands ###
